//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from R.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, HEX=55, INT=56, FLOAT=57, COMPLEX=58, STRING=59, ID=60, 
		USER_OP=61, NL=62, WS=63;
	public const int
		RULE_prog = 0, RULE_expr_or_assign = 1, RULE_expr = 2, RULE_exprlist = 3, 
		RULE_formlist = 4, RULE_form = 5, RULE_sublist = 6, RULE_sub = 7;
	public static readonly string[] ruleNames = {
		"prog", "expr_or_assign", "expr", "exprlist", "formlist", "form", "sublist", 
		"sub"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'<-'", "'='", "'<<-'", "'[['", "']'", "'['", "'::'", "':::'", 
		"'$'", "'@'", "'^'", "'-'", "'+'", "':'", "'*'", "'/'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'!'", "'&'", "'&&'", "'|'", "'||'", "'~'", 
		"'->'", "'->>'", "':='", "'function'", "'('", "')'", "'{'", "'}'", "'if'", 
		"'else'", "'for'", "'in'", "'while'", "'repeat'", "'?'", "'next'", "'break'", 
		"'NULL'", "'NA'", "'Inf'", "'NaN'", "'TRUE'", "'FALSE'", "','", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "HEX", "INT", "FLOAT", "COMPLEX", 
		"STRING", "ID", "USER_OP", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "R.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RParser.Eof, 0); }
		public Expr_or_assignContext[] expr_or_assign() {
			return GetRuleContexts<Expr_or_assignContext>();
		}
		public Expr_or_assignContext expr_or_assign(int i) {
			return GetRuleContext<Expr_or_assignContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(RParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(RParser.NL, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__23) | (1L << T__28) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__39) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID) | (1L << NL))) != 0)) {
				{
				State = 20;
				switch (TokenStream.La(1)) {
				case T__12:
				case T__13:
				case T__23:
				case T__28:
				case T__32:
				case T__33:
				case T__35:
				case T__37:
				case T__39:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case HEX:
				case INT:
				case FLOAT:
				case COMPLEX:
				case STRING:
				case ID:
					{
					State = 16; expr_or_assign();
					State = 17;
					_la = TokenStream.La(1);
					if ( !(_la==T__0 || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				case NL:
					{
					State = 19; Match(NL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 25; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_or_assignContext : ParserRuleContext {
		public Expr_or_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_or_assign; } }
	 
		public Expr_or_assignContext() { }
		public virtual void CopyFrom(Expr_or_assignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : Expr_or_assignContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_or_assignContext expr_or_assign() {
			return GetRuleContext<Expr_or_assignContext>(0);
		}
		public AssignmentContext(Expr_or_assignContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}
	public partial class ExpressionContext : Expr_or_assignContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpressionContext(Expr_or_assignContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public Expr_or_assignContext expr_or_assign() {
		Expr_or_assignContext _localctx = new Expr_or_assignContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr_or_assign);
		int _la;
		try {
			State = 32;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; expr(0);
				State = 28;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 29; expr_or_assign();
				}
				break;
			case 2:
				_localctx = new ExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexLiteralContext : ExprContext {
		public ITerminalNode HEX() { return GetToken(RParser.HEX, 0); }
		public HexLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
	}
	public partial class NullLiteralContext : ExprContext {
		public NullLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class IfElseStatementContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfElseStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterIfElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitIfElseStatement(this);
		}
	}
	public partial class NextStatementContext : ExprContext {
		public NextStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
	}
	public partial class ParenthesizedContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesizedContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterParenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitParenthesized(this);
		}
	}
	public partial class MemberAccessContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MemberAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
	}
	public partial class CompoundContext : ExprContext {
		public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public CompoundContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
	}
	public partial class FloatLiteralContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(RParser.FLOAT, 0); }
		public FloatLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
	}
	public partial class FormulaeContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FormulaeContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormulae(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormulae(this);
		}
	}
	public partial class WhileStatementContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WhileStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class IntLiteralContext : ExprContext {
		public ITerminalNode INT() { return GetToken(RParser.INT, 0); }
		public IntLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterIntLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitIntLiteral(this);
		}
	}
	public partial class ListAccessContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SublistContext sublist() {
			return GetRuleContext<SublistContext>(0);
		}
		public ListAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterListAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitListAccess(this);
		}
	}
	public partial class LogicalOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
	}
	public partial class LogicalAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
	}
	public partial class ComparisonContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
	}
	public partial class HelpContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HelpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterHelp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitHelp(this);
		}
	}
	public partial class ForElseStatementContext : ExprContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForElseStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterForElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitForElseStatement(this);
		}
	}
	public partial class ArrayAccessContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SublistContext sublist() {
			return GetRuleContext<SublistContext>(0);
		}
		public ArrayAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class SequenceContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SequenceContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}
	public partial class AdditionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AdditionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
	}
	public partial class StringLiteralContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(RParser.STRING, 0); }
		public StringLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}
	public partial class MultiplicationContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
	}
	public partial class RightAssignmentContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RightAssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterRightAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitRightAssignment(this);
		}
	}
	public partial class NanLiteralContext : ExprContext {
		public NanLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNanLiteral(this);
		}
	}
	public partial class RepeatStatementContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RepeatStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
	}
	public partial class PowerContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowerContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}
	public partial class BreakStatementContext : ExprContext {
		public BreakStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}
	public partial class FunctionContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormlistContext formlist() {
			return GetRuleContext<FormlistContext>(0);
		}
		public FunctionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}
	public partial class FalseLiteralContext : ExprContext {
		public FalseLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFalseLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFalseLiteral(this);
		}
	}
	public partial class ComplexLiteralContext : ExprContext {
		public ITerminalNode COMPLEX() { return GetToken(RParser.COMPLEX, 0); }
		public ComplexLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterComplexLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitComplexLiteral(this);
		}
	}
	public partial class FunctionCallContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SublistContext sublist() {
			return GetRuleContext<SublistContext>(0);
		}
		public FunctionCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}
	public partial class InfLiteralContext : ExprContext {
		public InfLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterInfLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitInfLiteral(this);
		}
	}
	public partial class TrueLiteralContext : ExprContext {
		public TrueLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterTrueLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitTrueLiteral(this);
		}
	}
	public partial class IfStatementContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfStatementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class SignContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SignContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}
	public partial class UserOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode USER_OP() { return GetToken(RParser.USER_OP, 0); }
		public UserOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterUserOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitUserOp(this);
		}
	}
	public partial class NamespaceContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NamespaceContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}
	public partial class NAContext : ExprContext {
		public NAContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNA(this);
		}
	}
	public partial class NegationContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new SignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 35;
				_la = TokenStream.La(1);
				if ( !(_la==T__12 || _la==T__13) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 36; expr(36);
				}
				break;
			case 2:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; Match(T__23);
				State = 38; expr(30);
				}
				break;
			case 3:
				{
				_localctx = new FormulaeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39; Match(T__28);
				State = 40; expr(27);
				}
				break;
			case 4:
				{
				_localctx = new FunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41; Match(T__32);
				State = 42; Match(T__33);
				State = 44;
				_la = TokenStream.La(1);
				if (_la==T__53 || _la==ID) {
					{
					State = 43; formlist();
					}
				}

				State = 46; Match(T__34);
				State = 47; expr(24);
				}
				break;
			case 5:
				{
				_localctx = new RepeatStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48; Match(T__42);
				State = 49; expr(17);
				}
				break;
			case 6:
				{
				_localctx = new HelpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50; Match(T__43);
				State = 51; expr(16);
				}
				break;
			case 7:
				{
				_localctx = new CompoundContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 52; Match(T__35);
				State = 53; exprlist();
				State = 54; Match(T__36);
				}
				break;
			case 8:
				{
				_localctx = new IfStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56; Match(T__37);
				State = 57; Match(T__33);
				State = 58; expr(0);
				State = 59; Match(T__34);
				State = 60; expr(0);
				}
				break;
			case 9:
				{
				_localctx = new IfElseStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(T__37);
				State = 63; Match(T__33);
				State = 64; expr(0);
				State = 65; Match(T__34);
				State = 66; expr(0);
				State = 67; Match(T__38);
				State = 68; expr(0);
				}
				break;
			case 10:
				{
				_localctx = new ForElseStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70; Match(T__39);
				State = 71; Match(T__33);
				State = 72; Match(ID);
				State = 73; Match(T__40);
				State = 74; expr(0);
				State = 75; Match(T__34);
				State = 76; expr(0);
				}
				break;
			case 11:
				{
				_localctx = new WhileStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; Match(T__41);
				State = 79; Match(T__33);
				State = 80; expr(0);
				State = 81; Match(T__34);
				State = 82; expr(0);
				}
				break;
			case 12:
				{
				_localctx = new NextStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; Match(T__44);
				}
				break;
			case 13:
				{
				_localctx = new BreakStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; Match(T__45);
				}
				break;
			case 14:
				{
				_localctx = new ParenthesizedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; Match(T__33);
				State = 87; expr(0);
				State = 88; Match(T__34);
				}
				break;
			case 15:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(ID);
				}
				break;
			case 16:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; Match(STRING);
				}
				break;
			case 17:
				{
				_localctx = new HexLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; Match(HEX);
				}
				break;
			case 18:
				{
				_localctx = new IntLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(INT);
				}
				break;
			case 19:
				{
				_localctx = new FloatLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; Match(FLOAT);
				}
				break;
			case 20:
				{
				_localctx = new ComplexLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95; Match(COMPLEX);
				}
				break;
			case 21:
				{
				_localctx = new NullLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96; Match(T__46);
				}
				break;
			case 22:
				{
				_localctx = new NAContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97; Match(T__47);
				}
				break;
			case 23:
				{
				_localctx = new InfLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(T__48);
				}
				break;
			case 24:
				{
				_localctx = new NanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(T__49);
				}
				break;
			case 25:
				{
				_localctx = new TrueLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; Match(T__50);
				}
				break;
			case 26:
				{
				_localctx = new FalseLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(T__51);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new NamespaceContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 105;
						_la = TokenStream.La(1);
						if ( !(_la==T__7 || _la==T__8) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 106; expr(40);
						}
						break;
					case 2:
						{
						_localctx = new MemberAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 108;
						_la = TokenStream.La(1);
						if ( !(_la==T__9 || _la==T__10) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 109; expr(39);
						}
						break;
					case 3:
						{
						_localctx = new PowerContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 110;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 111; Match(T__11);
						State = 112; expr(38);
						}
						break;
					case 4:
						{
						_localctx = new SequenceContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 113;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 114; Match(T__14);
						State = 115; expr(36);
						}
						break;
					case 5:
						{
						_localctx = new UserOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 116;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 117; Match(USER_OP);
						State = 118; expr(35);
						}
						break;
					case 6:
						{
						_localctx = new MultiplicationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 119;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 120;
						_la = TokenStream.La(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 121; expr(34);
						}
						break;
					case 7:
						{
						_localctx = new AdditionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 122;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 123;
						_la = TokenStream.La(1);
						if ( !(_la==T__12 || _la==T__13) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 124; expr(33);
						}
						break;
					case 8:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 125;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 126;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 127; expr(32);
						}
						break;
					case 9:
						{
						_localctx = new LogicalAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 128;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 129;
						_la = TokenStream.La(1);
						if ( !(_la==T__24 || _la==T__25) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 130; expr(30);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 132;
						_la = TokenStream.La(1);
						if ( !(_la==T__26 || _la==T__27) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 133; expr(29);
						}
						break;
					case 11:
						{
						_localctx = new FormulaeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 134;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 135; Match(T__28);
						State = 136; expr(27);
						}
						break;
					case 12:
						{
						_localctx = new RightAssignmentContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 137;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 138;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 139; expr(26);
						}
						break;
					case 13:
						{
						_localctx = new ListAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 141; Match(T__4);
						State = 142; sublist();
						State = 143; Match(T__5);
						State = 144; Match(T__5);
						}
						break;
					case 14:
						{
						_localctx = new ArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 146;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 147; Match(T__6);
						State = 148; sublist();
						State = 149; Match(T__5);
						}
						break;
					case 15:
						{
						_localctx = new FunctionCallContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 152; Match(T__33);
						State = 153; sublist();
						State = 154; Match(T__34);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
	 
		public ExprlistContext() { }
		public virtual void CopyFrom(ExprlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyContext : ExprlistContext {
		public EmptyContext(ExprlistContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
	}
	public partial class ExpressionListContext : ExprlistContext {
		public Expr_or_assignContext[] expr_or_assign() {
			return GetRuleContexts<Expr_or_assignContext>();
		}
		public Expr_or_assignContext expr_or_assign(int i) {
			return GetRuleContext<Expr_or_assignContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(RParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(RParser.NL, i);
		}
		public ExpressionListContext(ExprlistContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 6, RULE_exprlist);
		int _la;
		try {
			State = 172;
			switch (TokenStream.La(1)) {
			case T__12:
			case T__13:
			case T__23:
			case T__28:
			case T__32:
			case T__33:
			case T__35:
			case T__37:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case HEX:
			case INT:
			case FLOAT:
			case COMPLEX:
			case STRING:
			case ID:
				_localctx = new ExpressionListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; expr_or_assign();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__0 || _la==NL) {
					{
					{
					State = 162;
					_la = TokenStream.La(1);
					if ( !(_la==T__0 || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 164;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__23) | (1L << T__28) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__37) | (1L << T__39) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << HEX) | (1L << INT) | (1L << FLOAT) | (1L << COMPLEX) | (1L << STRING) | (1L << ID))) != 0)) {
						{
						State = 163; expr_or_assign();
						}
					}

					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case T__36:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormlistContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FormlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormlist(this);
		}
	}

	[RuleVersion(0)]
	public FormlistContext formlist() {
		FormlistContext _localctx = new FormlistContext(Context, State);
		EnterRule(_localctx, 8, RULE_formlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; form();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__52) {
				{
				{
				State = 175; Match(T__52);
				State = 176; form();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
	 
		public FormContext() { }
		public virtual void CopyFrom(FormContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormAssignmentContext : FormContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormAssignmentContext(FormContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormAssignment(this);
		}
	}
	public partial class FormEllipsisContext : FormContext {
		public FormEllipsisContext(FormContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormEllipsis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormEllipsis(this);
		}
	}
	public partial class FormIdentifierContext : FormContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public FormIdentifierContext(FormContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterFormIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitFormIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 10, RULE_form);
		try {
			State = 187;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new FormIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; Match(ID);
				}
				break;
			case 2:
				_localctx = new FormAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(ID);
				State = 184; Match(T__2);
				State = 185; expr(0);
				}
				break;
			case 3:
				_localctx = new FormEllipsisContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; Match(T__53);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SublistContext : ParserRuleContext {
		public SubContext[] sub() {
			return GetRuleContexts<SubContext>();
		}
		public SubContext sub(int i) {
			return GetRuleContext<SubContext>(i);
		}
		public SublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sublist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSublist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSublist(this);
		}
	}

	[RuleVersion(0)]
	public SublistContext sublist() {
		SublistContext _localctx = new SublistContext(Context, State);
		EnterRule(_localctx, 12, RULE_sublist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; sub();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__52) {
				{
				{
				State = 190; Match(T__52);
				State = 191; sub();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
	 
		public SubContext() { }
		public virtual void CopyFrom(SubContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubEllipsisContext : SubContext {
		public SubEllipsisContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubEllipsis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubEllipsis(this);
		}
	}
	public partial class SubEmptyContext : SubContext {
		public SubEmptyContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubEmpty(this);
		}
	}
	public partial class SubIncompleteNullContext : SubContext {
		public SubIncompleteNullContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubIncompleteNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubIncompleteNull(this);
		}
	}
	public partial class SubIncompleteAssignmentContext : SubContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public SubIncompleteAssignmentContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubIncompleteAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubIncompleteAssignment(this);
		}
	}
	public partial class SubExpressionContext : SubContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExpressionContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubExpression(this);
		}
	}
	public partial class SubNullAssignmentContext : SubContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubNullAssignmentContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubNullAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubNullAssignment(this);
		}
	}
	public partial class SubAssignmentContext : SubContext {
		public ITerminalNode ID() { return GetToken(RParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubAssignmentContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubAssignment(this);
		}
	}
	public partial class SubIncompleteStringContext : SubContext {
		public ITerminalNode STRING() { return GetToken(RParser.STRING, 0); }
		public SubIncompleteStringContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubIncompleteString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubIncompleteString(this);
		}
	}
	public partial class SubStringAssignmentContext : SubContext {
		public ITerminalNode STRING() { return GetToken(RParser.STRING, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubStringAssignmentContext(SubContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.EnterSubStringAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRListener typedListener = listener as IRListener;
			if (typedListener != null) typedListener.ExitSubStringAssignment(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 14, RULE_sub);
		try {
			State = 215;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new SubExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; expr(0);
				}
				break;
			case 2:
				_localctx = new SubIncompleteAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; Match(ID);
				State = 199; Match(T__2);
				}
				break;
			case 3:
				_localctx = new SubAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; Match(ID);
				State = 201; Match(T__2);
				State = 202; expr(0);
				}
				break;
			case 4:
				_localctx = new SubIncompleteStringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 203; Match(STRING);
				State = 204; Match(T__2);
				}
				break;
			case 5:
				_localctx = new SubStringAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 205; Match(STRING);
				State = 206; Match(T__2);
				State = 207; expr(0);
				}
				break;
			case 6:
				_localctx = new SubIncompleteNullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 208; Match(T__46);
				State = 209; Match(T__2);
				}
				break;
			case 7:
				_localctx = new SubNullAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 210; Match(T__46);
				State = 211; Match(T__2);
				State = 212; expr(0);
				}
				break;
			case 8:
				_localctx = new SubEllipsisContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 213; Match(T__53);
				}
				break;
			case 9:
				_localctx = new SubEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 39);
		case 1: return Precpred(Context, 38);
		case 2: return Precpred(Context, 37);
		case 3: return Precpred(Context, 35);
		case 4: return Precpred(Context, 34);
		case 5: return Precpred(Context, 33);
		case 6: return Precpred(Context, 32);
		case 7: return Precpred(Context, 31);
		case 8: return Precpred(Context, 29);
		case 9: return Precpred(Context, 28);
		case 10: return Precpred(Context, 26);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 41);
		case 13: return Precpred(Context, 40);
		case 14: return Precpred(Context, 23);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x41\xDC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x17\n\x2\f\x2\xE\x2\x1A\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3#\n\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4/\n\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4i\n\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\a\x4\x9F\n\x4\f\x4\xE\x4\xA2\v\x4\x3\x5\x3\x5\x3\x5"+
		"\x5\x5\xA7\n\x5\a\x5\xA9\n\x5\f\x5\xE\x5\xAC\v\x5\x3\x5\x5\x5\xAF\n\x5"+
		"\x3\x6\x3\x6\x3\x6\a\x6\xB4\n\x6\f\x6\xE\x6\xB7\v\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x5\a\xBE\n\a\x3\b\x3\b\x3\b\a\b\xC3\n\b\f\b\xE\b\xC6\v\b\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x5\t\xDA\n\t\x3\t\x2\x3\x6\n\x2\x4\x6\b\n\f\xE\x10\x2"+
		"\f\x4\x2\x3\x3@@\x3\x2\x4\x6\x3\x2\xF\x10\x3\x2\n\v\x3\x2\f\r\x3\x2\x12"+
		"\x13\x3\x2\x14\x19\x3\x2\x1B\x1C\x3\x2\x1D\x1E\x3\x2 \"\x10E\x2\x18\x3"+
		"\x2\x2\x2\x4\"\x3\x2\x2\x2\x6h\x3\x2\x2\x2\b\xAE\x3\x2\x2\x2\n\xB0\x3"+
		"\x2\x2\x2\f\xBD\x3\x2\x2\x2\xE\xBF\x3\x2\x2\x2\x10\xD9\x3\x2\x2\x2\x12"+
		"\x13\x5\x4\x3\x2\x13\x14\t\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x17\a@\x2"+
		"\x2\x16\x12\x3\x2\x2\x2\x16\x15\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16"+
		"\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x1B\x3\x2\x2\x2\x1A\x18\x3\x2\x2"+
		"\x2\x1B\x1C\a\x2\x2\x3\x1C\x3\x3\x2\x2\x2\x1D\x1E\x5\x6\x4\x2\x1E\x1F"+
		"\t\x3\x2\x2\x1F \x5\x4\x3\x2 #\x3\x2\x2\x2!#\x5\x6\x4\x2\"\x1D\x3\x2\x2"+
		"\x2\"!\x3\x2\x2\x2#\x5\x3\x2\x2\x2$%\b\x4\x1\x2%&\t\x4\x2\x2&i\x5\x6\x4"+
		"&\'(\a\x1A\x2\x2(i\x5\x6\x4 )*\a\x1F\x2\x2*i\x5\x6\x4\x1D+,\a#\x2\x2,"+
		".\a$\x2\x2-/\x5\n\x6\x2.-\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		"\x31\a%\x2\x2\x31i\x5\x6\x4\x1A\x32\x33\a-\x2\x2\x33i\x5\x6\x4\x13\x34"+
		"\x35\a.\x2\x2\x35i\x5\x6\x4\x12\x36\x37\a&\x2\x2\x37\x38\x5\b\x5\x2\x38"+
		"\x39\a\'\x2\x2\x39i\x3\x2\x2\x2:;\a(\x2\x2;<\a$\x2\x2<=\x5\x6\x4\x2=>"+
		"\a%\x2\x2>?\x5\x6\x4\x2?i\x3\x2\x2\x2@\x41\a(\x2\x2\x41\x42\a$\x2\x2\x42"+
		"\x43\x5\x6\x4\x2\x43\x44\a%\x2\x2\x44\x45\x5\x6\x4\x2\x45\x46\a)\x2\x2"+
		"\x46G\x5\x6\x4\x2Gi\x3\x2\x2\x2HI\a*\x2\x2IJ\a$\x2\x2JK\a>\x2\x2KL\a+"+
		"\x2\x2LM\x5\x6\x4\x2MN\a%\x2\x2NO\x5\x6\x4\x2Oi\x3\x2\x2\x2PQ\a,\x2\x2"+
		"QR\a$\x2\x2RS\x5\x6\x4\x2ST\a%\x2\x2TU\x5\x6\x4\x2Ui\x3\x2\x2\x2Vi\a/"+
		"\x2\x2Wi\a\x30\x2\x2XY\a$\x2\x2YZ\x5\x6\x4\x2Z[\a%\x2\x2[i\x3\x2\x2\x2"+
		"\\i\a>\x2\x2]i\a=\x2\x2^i\a\x39\x2\x2_i\a:\x2\x2`i\a;\x2\x2\x61i\a<\x2"+
		"\x2\x62i\a\x31\x2\x2\x63i\a\x32\x2\x2\x64i\a\x33\x2\x2\x65i\a\x34\x2\x2"+
		"\x66i\a\x35\x2\x2gi\a\x36\x2\x2h$\x3\x2\x2\x2h\'\x3\x2\x2\x2h)\x3\x2\x2"+
		"\x2h+\x3\x2\x2\x2h\x32\x3\x2\x2\x2h\x34\x3\x2\x2\x2h\x36\x3\x2\x2\x2h"+
		":\x3\x2\x2\x2h@\x3\x2\x2\x2hH\x3\x2\x2\x2hP\x3\x2\x2\x2hV\x3\x2\x2\x2"+
		"hW\x3\x2\x2\x2hX\x3\x2\x2\x2h\\\x3\x2\x2\x2h]\x3\x2\x2\x2h^\x3\x2\x2\x2"+
		"h_\x3\x2\x2\x2h`\x3\x2\x2\x2h\x61\x3\x2\x2\x2h\x62\x3\x2\x2\x2h\x63\x3"+
		"\x2\x2\x2h\x64\x3\x2\x2\x2h\x65\x3\x2\x2\x2h\x66\x3\x2\x2\x2hg\x3\x2\x2"+
		"\x2i\xA0\x3\x2\x2\x2jk\f)\x2\x2kl\t\x5\x2\x2l\x9F\x5\x6\x4*mn\f(\x2\x2"+
		"no\t\x6\x2\x2o\x9F\x5\x6\x4)pq\f\'\x2\x2qr\a\xE\x2\x2r\x9F\x5\x6\x4(s"+
		"t\f%\x2\x2tu\a\x11\x2\x2u\x9F\x5\x6\x4&vw\f$\x2\x2wx\a?\x2\x2x\x9F\x5"+
		"\x6\x4%yz\f#\x2\x2z{\t\a\x2\x2{\x9F\x5\x6\x4$|}\f\"\x2\x2}~\t\x4\x2\x2"+
		"~\x9F\x5\x6\x4#\x7F\x80\f!\x2\x2\x80\x81\t\b\x2\x2\x81\x9F\x5\x6\x4\""+
		"\x82\x83\f\x1F\x2\x2\x83\x84\t\t\x2\x2\x84\x9F\x5\x6\x4 \x85\x86\f\x1E"+
		"\x2\x2\x86\x87\t\n\x2\x2\x87\x9F\x5\x6\x4\x1F\x88\x89\f\x1C\x2\x2\x89"+
		"\x8A\a\x1F\x2\x2\x8A\x9F\x5\x6\x4\x1D\x8B\x8C\f\x1B\x2\x2\x8C\x8D\t\v"+
		"\x2\x2\x8D\x9F\x5\x6\x4\x1C\x8E\x8F\f+\x2\x2\x8F\x90\a\a\x2\x2\x90\x91"+
		"\x5\xE\b\x2\x91\x92\a\b\x2\x2\x92\x93\a\b\x2\x2\x93\x9F\x3\x2\x2\x2\x94"+
		"\x95\f*\x2\x2\x95\x96\a\t\x2\x2\x96\x97\x5\xE\b\x2\x97\x98\a\b\x2\x2\x98"+
		"\x9F\x3\x2\x2\x2\x99\x9A\f\x19\x2\x2\x9A\x9B\a$\x2\x2\x9B\x9C\x5\xE\b"+
		"\x2\x9C\x9D\a%\x2\x2\x9D\x9F\x3\x2\x2\x2\x9Ej\x3\x2\x2\x2\x9Em\x3\x2\x2"+
		"\x2\x9Ep\x3\x2\x2\x2\x9Es\x3\x2\x2\x2\x9Ev\x3\x2\x2\x2\x9Ey\x3\x2\x2\x2"+
		"\x9E|\x3\x2\x2\x2\x9E\x7F\x3\x2\x2\x2\x9E\x82\x3\x2\x2\x2\x9E\x85\x3\x2"+
		"\x2\x2\x9E\x88\x3\x2\x2\x2\x9E\x8B\x3\x2\x2\x2\x9E\x8E\x3\x2\x2\x2\x9E"+
		"\x94\x3\x2\x2\x2\x9E\x99\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2"+
		"\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\a\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xAA"+
		"\x5\x4\x3\x2\xA4\xA6\t\x2\x2\x2\xA5\xA7\x5\x4\x3\x2\xA6\xA5\x3\x2\x2\x2"+
		"\xA6\xA7\x3\x2\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xA4\x3\x2\x2\x2\xA9\xAC\x3"+
		"\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAF\x3\x2\x2\x2"+
		"\xAC\xAA\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xA3\x3\x2\x2\x2\xAE\xAD\x3"+
		"\x2\x2\x2\xAF\t\x3\x2\x2\x2\xB0\xB5\x5\f\a\x2\xB1\xB2\a\x37\x2\x2\xB2"+
		"\xB4\x5\f\a\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2"+
		"\x2\xB5\xB6\x3\x2\x2\x2\xB6\v\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBE"+
		"\a>\x2\x2\xB9\xBA\a>\x2\x2\xBA\xBB\a\x5\x2\x2\xBB\xBE\x5\x6\x4\x2\xBC"+
		"\xBE\a\x38\x2\x2\xBD\xB8\x3\x2\x2\x2\xBD\xB9\x3\x2\x2\x2\xBD\xBC\x3\x2"+
		"\x2\x2\xBE\r\x3\x2\x2\x2\xBF\xC4\x5\x10\t\x2\xC0\xC1\a\x37\x2\x2\xC1\xC3"+
		"\x5\x10\t\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2"+
		"\x2\xC4\xC5\x3\x2\x2\x2\xC5\xF\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xDA"+
		"\x5\x6\x4\x2\xC8\xC9\a>\x2\x2\xC9\xDA\a\x5\x2\x2\xCA\xCB\a>\x2\x2\xCB"+
		"\xCC\a\x5\x2\x2\xCC\xDA\x5\x6\x4\x2\xCD\xCE\a=\x2\x2\xCE\xDA\a\x5\x2\x2"+
		"\xCF\xD0\a=\x2\x2\xD0\xD1\a\x5\x2\x2\xD1\xDA\x5\x6\x4\x2\xD2\xD3\a\x31"+
		"\x2\x2\xD3\xDA\a\x5\x2\x2\xD4\xD5\a\x31\x2\x2\xD5\xD6\a\x5\x2\x2\xD6\xDA"+
		"\x5\x6\x4\x2\xD7\xDA\a\x38\x2\x2\xD8\xDA\x3\x2\x2\x2\xD9\xC7\x3\x2\x2"+
		"\x2\xD9\xC8\x3\x2\x2\x2\xD9\xCA\x3\x2\x2\x2\xD9\xCD\x3\x2\x2\x2\xD9\xCF"+
		"\x3\x2\x2\x2\xD9\xD2\x3\x2\x2\x2\xD9\xD4\x3\x2\x2\x2\xD9\xD7\x3\x2\x2"+
		"\x2\xD9\xD8\x3\x2\x2\x2\xDA\x11\x3\x2\x2\x2\x10\x16\x18\".h\x9E\xA0\xA6"+
		"\xAA\xAE\xB5\xBD\xC4\xD9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
