//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from R.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RBaseListener : IRListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] RParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] RParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] RParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] RParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.ExpressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] RParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.ExpressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] RParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.HexLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHexLiteral([NotNull] RParser.HexLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.HexLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHexLiteral([NotNull] RParser.HexLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.NextStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNextStatement([NotNull] RParser.NextStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.NextStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNextStatement([NotNull] RParser.NextStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.IfElseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseStatement([NotNull] RParser.IfElseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.IfElseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseStatement([NotNull] RParser.IfElseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.NullLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullLiteral([NotNull] RParser.NullLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.NullLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullLiteral([NotNull] RParser.NullLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.MemberAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccess([NotNull] RParser.MemberAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.MemberAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccess([NotNull] RParser.MemberAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Parenthesized"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesized([NotNull] RParser.ParenthesizedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Parenthesized"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesized([NotNull] RParser.ParenthesizedContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Compound"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompound([NotNull] RParser.CompoundContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Compound"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompound([NotNull] RParser.CompoundContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FloatLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatLiteral([NotNull] RParser.FloatLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FloatLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatLiteral([NotNull] RParser.FloatLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.WhileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] RParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.WhileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] RParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Formulae"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormulae([NotNull] RParser.FormulaeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Formulae"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormulae([NotNull] RParser.FormulaeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.IntLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntLiteral([NotNull] RParser.IntLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.IntLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntLiteral([NotNull] RParser.IntLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.ListAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListAccess([NotNull] RParser.ListAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.ListAccess"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListAccess([NotNull] RParser.ListAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.LogicalOr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOr([NotNull] RParser.LogicalOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.LogicalOr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOr([NotNull] RParser.LogicalOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.LogicalAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAnd([NotNull] RParser.LogicalAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.LogicalAnd"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAnd([NotNull] RParser.LogicalAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Comparison"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparison([NotNull] RParser.ComparisonContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Comparison"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparison([NotNull] RParser.ComparisonContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Help"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHelp([NotNull] RParser.HelpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Help"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHelp([NotNull] RParser.HelpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.ForEachStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForEachStatement([NotNull] RParser.ForEachStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.ForEachStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForEachStatement([NotNull] RParser.ForEachStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Sequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSequence([NotNull] RParser.SequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Sequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSequence([NotNull] RParser.SequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] RParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] RParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Addition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition([NotNull] RParser.AdditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Addition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition([NotNull] RParser.AdditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.StringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] RParser.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.StringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] RParser.StringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Multiplication"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplication([NotNull] RParser.MultiplicationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Multiplication"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplication([NotNull] RParser.MultiplicationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.RightAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRightAssignment([NotNull] RParser.RightAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.RightAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRightAssignment([NotNull] RParser.RightAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPower([NotNull] RParser.PowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Power"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPower([NotNull] RParser.PowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.RepeatStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeatStatement([NotNull] RParser.RepeatStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.RepeatStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeatStatement([NotNull] RParser.RepeatStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.NanLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNanLiteral([NotNull] RParser.NanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.NanLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNanLiteral([NotNull] RParser.NanLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FalseLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFalseLiteral([NotNull] RParser.FalseLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FalseLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFalseLiteral([NotNull] RParser.FalseLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] RParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] RParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.BreakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] RParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.BreakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] RParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.ComplexLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplexLiteral([NotNull] RParser.ComplexLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.ComplexLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplexLiteral([NotNull] RParser.ComplexLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FunctionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] RParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FunctionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] RParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.InfLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInfLiteral([NotNull] RParser.InfLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.InfLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInfLiteral([NotNull] RParser.InfLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.TrueLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTrueLiteral([NotNull] RParser.TrueLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.TrueLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTrueLiteral([NotNull] RParser.TrueLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndex([NotNull] RParser.IndexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Index"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndex([NotNull] RParser.IndexContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.IfStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] RParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.IfStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] RParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.UserOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUserOp([NotNull] RParser.UserOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.UserOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUserOp([NotNull] RParser.UserOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Sign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSign([NotNull] RParser.SignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Sign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSign([NotNull] RParser.SignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespace([NotNull] RParser.NamespaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespace([NotNull] RParser.NamespaceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.NA"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNA([NotNull] RParser.NAContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.NA"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNA([NotNull] RParser.NAContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Negation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegation([NotNull] RParser.NegationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Negation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegation([NotNull] RParser.NegationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.ExpressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionList([NotNull] RParser.ExpressionListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.ExpressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionList([NotNull] RParser.ExpressionListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.Empty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmpty([NotNull] RParser.EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.Empty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmpty([NotNull] RParser.EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.formlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormlist([NotNull] RParser.FormlistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.formlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormlist([NotNull] RParser.FormlistContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FormIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormIdentifier([NotNull] RParser.FormIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FormIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormIdentifier([NotNull] RParser.FormIdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FormAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormAssignment([NotNull] RParser.FormAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FormAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormAssignment([NotNull] RParser.FormAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.FormEllipsis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormEllipsis([NotNull] RParser.FormEllipsisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.FormEllipsis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormEllipsis([NotNull] RParser.FormEllipsisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.sublist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSublist([NotNull] RParser.SublistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.sublist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSublist([NotNull] RParser.SublistContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubExpression([NotNull] RParser.SubExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubExpression([NotNull] RParser.SubExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubIncompleteAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubIncompleteAssignment([NotNull] RParser.SubIncompleteAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubIncompleteAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubIncompleteAssignment([NotNull] RParser.SubIncompleteAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubAssignment([NotNull] RParser.SubAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubAssignment([NotNull] RParser.SubAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubIncompleteString"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubIncompleteString([NotNull] RParser.SubIncompleteStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubIncompleteString"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubIncompleteString([NotNull] RParser.SubIncompleteStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubStringAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubStringAssignment([NotNull] RParser.SubStringAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubStringAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubStringAssignment([NotNull] RParser.SubStringAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubIncompleteNull"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubIncompleteNull([NotNull] RParser.SubIncompleteNullContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubIncompleteNull"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubIncompleteNull([NotNull] RParser.SubIncompleteNullContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubNullAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubNullAssignment([NotNull] RParser.SubNullAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubNullAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubNullAssignment([NotNull] RParser.SubNullAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubEllipsis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubEllipsis([NotNull] RParser.SubEllipsisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubEllipsis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubEllipsis([NotNull] RParser.SubEllipsisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RParser.SubEmpty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubEmpty([NotNull] RParser.SubEmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RParser.SubEmpty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubEmpty([NotNull] RParser.SubEmptyContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
