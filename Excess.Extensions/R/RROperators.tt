<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# Type[] numericTypes = new[] {
	typeof(double), typeof(float),
	typeof(Int64), typeof(Int32)
    };

	string[] numericOperators = {
		"add",
		"sub",
		"mul",
		"div",
	};

	string[] numericOperatorString = {
		"+",
		"-",
		"*",
		"/",
	};

	string[] boolOperators = {
		"gt",
		"ge",
		"lt",
		"le",
		"eq",
		"neq",
	};

	string[] boolOperatorString = {
		">",
		">=",
		"<",
		"<=",
		"==",
		"!=",
	};
#>

using System;
namespace Excess.Extensions.R
{

	public static partial class RR {
		<# for(int i = 0; i < numericTypes.Length; i++) { 
			var type1 = numericTypes[i];#>

			public static <#= type1.Name #> ps (<#= type1.Name #> val) 
			{
				return val;
			}

			public static Vector<<#= type1.Name #>> ps (Vector<<#= type1.Name #>> val) 
			{
				return val;
			}

			public static <#= type1.Name #> ns (<#= type1.Name #> val) 
			{
				return -val;
			}

			public static Vector<<#= type1.Name #>> ns (Vector<<#= type1.Name #>> val) 
			{
				return Vector<<#= type1.Name #>>.create(val, value => -value );
			}

			<# for(int j = i; j < numericTypes.Length; j++) { 
				var type2 = numericTypes[j]; #>

				<# for(int nop = 0; nop < numericOperators.Length; nop++) { 
					var opName = numericOperators[nop]; 
					var opString = numericOperatorString[nop]; #>

					public static <#= type1.Name #> <#= opName #> (<#= type1.Name #> val1, <#= type2.Name #> val2) 
					{
						return val1 <#= opString #> val2;
					}

					public static Vector<<#= type1.Name #>> <#= opName #> (Vector<<#= type1.Name #>> val1, <#= type2.Name #> val2) 
					{
						return Vector<<#= type1.Name #>>.create(val1, value => value <#= opString #> val2);
					}

					public static Vector<<#= type1.Name #>> <#= opName #> (Vector<<#= type1.Name #>> val1, Vector<<#= type2.Name #>> val2) 
					{
						return Vector<<#= type1.Name #>>.create(val1, val2, (value1, value2) => value1 <#= opString #> value2);
					}

					<# if (type1 != type2) { #>
						public static Vector<<#= type1.Name #>> <#= opName #> (Vector<<#= type2.Name #>> val1, <#= type1.Name #> val2) 
						{
							return Vector<<#= type1.Name #>>.create(val1, value => value <#= opString #> val2);
						}

						public static Vector<<#= type1.Name #>> <#= opName #> (Vector<<#= type2.Name #>> val1, Vector<<#= type1.Name #>> val2) 
						{
							return Vector<<#= type1.Name #>>.create(val1, val2, (value1, value2) => value1 <#= opString #> value2);
						}
					<# } #>
				<# } #>

				<# for(int bop = 0; bop < boolOperators.Length; bop++) { 
					var opName = boolOperators[bop]; 
					var opString = boolOperatorString[bop]; #>

					public static bool <#= opName #> (<#= type1.Name #> val1, <#= type2.Name #> val2) 
					{
						return val1 <#= opString #> val2;
					}

					public static Vector<bool> <#= opName #> (Vector<<#= type1.Name #>> val1, <#= type2.Name #> val2) 
					{
						return Vector<bool>.create<<#= type1.Name #>>(val1, value => value <#= opString #> val2);
					}

					public static Vector<bool> <#= opName #> (Vector<<#= type1.Name #>> val1, Vector<<#= type2.Name #>> val2) 
					{
						return Vector<bool>.create<<#= type1.Name #>, <#= type2.Name #>>(val1, val2, (value1, value2) => value1 <#= opString #> value2);
					}

					<# if (type1 != type2) { #>
						public static bool <#= opName #> (<#= type2.Name #> val1, <#= type1.Name #> val2) 
						{
							return val1 <#= opString #> val2;
						}

						public static Vector<bool> <#= opName #> (Vector<<#= type2.Name #>> val1, <#= type1.Name #> val2) 
						{
							return Vector<bool>.create<<#= type2.Name #>>(val1, value => value <#= opString #> val2);
						}

						public static Vector<bool> <#= opName #> (Vector<<#= type2.Name #>> val1, Vector<<#= type1.Name #>> val2) 
						{
							return Vector<bool>.create<<#= type2.Name #>, <#= type1.Name #>>(val1, val2, (value1, value2) => value1 <#= opString #> value2);
						}
					<# } #>
				<# } #>
			<# } #>
		<# } #>

		//dynamic
		<# for(int nop = 0; nop < numericOperators.Length; nop++) { 
			var opName = numericOperators[nop]; #>

			<# for(int i = 0; i < numericTypes.Length; i++) { 
				var type1 = numericTypes[i];#>
				
				public static IVector <#= opName #> (IVector val1, <#= type1.Name #> val2) 
				{
					<# for(int j = 0; j < numericTypes.Length; j++) { 
						var type2 = numericTypes[j];#>

						if (val1 is Vector<<#= type2.Name #>>)
							return <#= opName #>(val1 as Vector<<#= type2.Name #>>, val2);
					<# } #>

					throw new InvalidOperationException("invalid type combination");
				}

				public static IVector <#= opName #> (<#= type1.Name #> val1,  IVector val2) 
				{
					<# for(int j = 0; j < numericTypes.Length; j++) { 
						var type2 = numericTypes[j];#>

						if (val2 is Vector<<#= type2.Name #>>)
							return <#= opName #>(val2 as Vector<<#= type2.Name #>>, val1);
					<# } #>

					throw new InvalidOperationException("invalid type combination");
				}

				public static IVector <#= opName #> (IVector val1, Vector<<#= type1.Name #>> val2) 
				{
					<# for(int j = 0; j < numericTypes.Length; j++) { 
						var type2 = numericTypes[j];#>

						if (val1 is Vector<<#= type2.Name #>>)
							return <#= opName #>(val1 as Vector<<#= type2.Name #>>, val2);
					<# } #>

					throw new InvalidOperationException("invalid type combination");
				}

				public static IVector <#= opName #> (Vector<<#= type1.Name #>> val1,  IVector val2) 
				{
					<# for(int j = 0; j < numericTypes.Length; j++) { 
						var type2 = numericTypes[j];#>

						if (val2 is Vector<<#= type2.Name #>>)
							return <#= opName #>(val2 as Vector<<#= type2.Name #>>, val1);
					<# } #>

					throw new InvalidOperationException("invalid type combination");
				}
			<# } #>

			public static IVector <#= opName #> (IVector val1,  IVector val2) 
			{
				<# for(int i = 0; i < numericTypes.Length; i++) { 
					var type1 = numericTypes[i];#>

					if (val1 is Vector<<#= type1.Name #>>)
					{
						<# for(int j = 0; j < numericTypes.Length; j++) { 
							var type2 = numericTypes[j];#>

						if (val2 is Vector<<#= type2.Name #>>)
							return <#= opName #>(val1 as Vector<<#= type1.Name #>>, val2 as Vector<<#= type2.Name #>>);
						<# } #>
					}
						
				<# } #>

				throw new InvalidOperationException("invalid type combination");
			}
		<# } #>
	}
}