<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# Type[] types = new[] {
	typeof(double), typeof(float),
	typeof(Int64), typeof(Int32)
    };
#>

using System;
using System.Collections.Generic;
using System.Linq;

namespace Excess.Extensions.R
{
	public static partial class RR {
	<# foreach(var type in types) { #>

		public static <#= type.Name #> sum(Vector<<#= type.Name #>> val)
		{
			<#= type.Name #> result = 0;
			foreach (var value in val.data)
				result += value;
			return result;
		}

        public static Vector<<#= type.Name #>> seq(<#= type.Name #> from = 1, <#= type.Name #> to = 1, <#= type.Name #> by = 0, int length_out = 0, IVector along_with = null)
        {
            if (length_out > 0)
            {
                by = (to - from) / (length_out - 1);
            }
            else
            {
                if (by == 0)
                    by = from < to? 1 : -1;

                length_out = (int)((to - from) / (by + 1));
            }

            if (length_out == 0)
                return null;

            return Vector<<#= type.Name #>>.create(length_out, <#= type.Name #>Sequence(from, by, length_out));
        }

        private static IEnumerable<<#= type.Name #>> <#= type.Name #>Sequence(<#= type.Name #> from, <#= type.Name #> by, int len)
        {
            for (int i = 0; i < len; i++)
            {
                yield return from;
                from += by;
            }
        }

		public static Vector<<#= type.Name #>> rep(<#= type.Name #> val, int times = 0, int length_out = 0, int each = 0)
		{
			if (length_out == 0)
				length_out = times;

			if (length_out == 0)
				length_out = each;

			if (length_out == 0)
				throw new InvalidOperationException("must supply a non-zero parameter");

			return Vector<<#= type.Name #>>.create(length_out, val);
		}

		public static Vector<<#= type.Name #>> rep(Vector<<#= type.Name #>> val, int times = 0, int length_out = 0, int each = 0)
		{
			if (length_out <= 0)
			{
				if (each > 0)
					length_out = val.length*times;
				else if (times > 0)
					length_out = val.length*times;
			}
			
			if (length_out == 0)
				throw new InvalidOperationException("must supply a non-negative parameter");

			return Vector<<#= type.Name #>>.create(length_out, Rep<<#= type.Name #>> (val, length_out, each));
		}

	<# } #>

	}
}