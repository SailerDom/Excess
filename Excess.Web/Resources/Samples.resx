<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arrays" xml:space="preserve">
    <value>class Arrays 
{
    void main()
    {
        var arr = [10, 15, 30];
        
        foreach(int val in arr)
            console.write(val);
    }
}</value>
  </data>
  <data name="AsynchExtension" xml:space="preserve">
    <value>environment
    .keyword("asynch")
    .keyword("synch");

syntax
    .extension("asynch", ExtensionKind.Code, ProcessAsynch)
    .extension("synch", ExtensionKind.Code, ProcessSynch);</value>
  </data>
  <data name="AsynchTransform" xml:space="preserve">
    <value>private static SyntaxNode ProcessAsynch(SyntaxNode node, Scope scope, SyntacticalExtension&lt;SyntaxNode&gt; extension)
{
    if (extension.Kind == ExtensionKind.Code)
    {
        var result = AsynchTemplate
            .ReplaceNodes(AsynchTemplate
                .DescendantNodes()
                .OfType&lt;BlockSyntax&gt;(), 
                (oldNode, newNode) =&gt; extension.Body);

        var document = scope.GetDocument&lt;SyntaxToken, SyntaxNode, SemanticModel&gt;();
        document.change(node.Parent, RoslynCompiler.AddStatement(ContextVariable, before: node));

        return result;
    }

    scope.AddError("asynch01", "asynch does not return a value", node);
    return node;
}

private static SyntaxNode ProcessSynch(SyntaxNode node, Scope scope, SyntacticalExtension&lt;SyntaxNode&gt; extension)
{
    if (extension.Kind == ExtensionKind.Code)
    {
        return SynchTemplate
            .ReplaceNodes(SynchTemplate
                .DescendantNodes()
                .OfType&lt;BlockSyntax&gt;(),
                (oldNode, newNode) =&gt; extension.Body);
    }

    scope.AddError("synch01", "synch does not return a value", node);
    return node;
}

static private StatementSyntax ContextVariable = CSharp.ParseStatement(@"
    SynchronizationContext __ASynchCtx = SynchronizationContext.Current; ");

static private StatementSyntax AsynchTemplate = CSharp.ParseStatement(@"
    Task.Factory.StartNew(() =&gt;
    {
    });");

static private StatementSyntax SynchTemplate = CSharp.ParseStatement(@"
    __ASynchCtx.Post(() =&gt; 
    { 
    });");
</value>
  </data>
  <data name="AsynchUsage" xml:space="preserve">
    <value>void main()
{
    asynch()
    {
        var x = expensive();
          	
        synch()
        {
            notify(x);
        }
    }
}</value>
  </data>
  <data name="Chopsticks" xml:space="preserve">
    <value>concurrent class chopstick
{
    [Forever]
    void main()
    {
        {acquire | release}
    }

    public void acquire(object owner)
    {
        if (_owner != null)
        {
            {release}
        }
                        
        _owner = owner;
    }
	
    public void release(object owner)
    {
        if (_owner != owner)
            throw new InvalidOperationException();

        _owner = null;
    }

    private object _owner;
}</value>
  </data>
  <data name="ContractExtension" xml:space="preserve">
    <value>environment.
    keyword("contract");

syntax
    .extension("contract", ExtensionKind.Code, ProcessContract);</value>
  </data>
  <data name="ContractTransform" xml:space="preserve">
    <value>private static SyntaxNode ProcessContract(SyntaxNode node, Scope scope, SyntacticalExtension&lt;SyntaxNode&gt; extension)
{
    if (extension.Kind == ExtensionKind.Code)
    {
        var block = extension.Body as BlockSyntax;

        List&lt;StatementSyntax&gt; checks = new List&lt;StatementSyntax&gt;();
        foreach (var st in block.Statements)
        {
            var stExpression = st as ExpressionStatementSyntax;
            if (stExpression == null)
            {
                scope.AddError("contract01", "contracts only support boolean expressions", st);
                continue;
            }

            var contractCheck = ContractCheck
                .ReplaceNodes(ContractCheck
                    .DescendantNodes()
                    .OfType&lt;ExpressionSyntax&gt;()
                    .Where(expr =&gt; expr.ToString() == "__condition"),

                    (oldNode, newNode) =&gt; 
                    stExpression.Expression);

            checks.Add(contractCheck);
        }

        return CSharp.Block(checks);
    }

    scope.AddError("contract02", "contract cannot return a value", node);
    return node;
}

static private StatementSyntax ContractCheck = CSharp.ParseStatement(@"
    if (!(__condition)) 
        throw new InvalidOperationException(""Breach of contract!!"");");</value>
  </data>
  <data name="ContractUsage" xml:space="preserve">
    <value>void main(int x, int y)
{
    contract()
    {
        x &gt; 10;
        x &lt; 20;
        x &gt;= y;
    }
}</value>
  </data>
  <data name="Events" xml:space="preserve">
    <value>namespace Events 
{
    class Base
    {
        //c# way
        public delegate void FinishedHandler(int x, int y);
        public event FinishedHandler Finished;
    }
  
    class Derived : Base
    {
        public event closed(int x, int y);

        on closed(x, y)
        {
            console.write(x);
        }

        on Finished()
        {
            console.write(y);
        }
    }
}</value>
  </data>
  <data name="Extensions" xml:space="preserve">
    <value>class Extensions
{
    void main()
    {
        asynch()
        {
            var x = expensive();
          	
            synch()
            {
              	notify(x);
            }
        }
    }
}</value>
  </data>
  <data name="Functions" xml:space="preserve">
    <value>class Functions 
{
    void main()
    {
        //as javascript-style argument
        foo(function(value) {
            console.write(value);
            return value + 5;
        });
    }
  
    //as a method, with type inference
    function foo(function&lt;int, int&gt; callback) //as a type
    {
        int result = callback(73);
        return result;
    }

    string function bar()
    {
        return "bar";
    }
}</value>
  </data>
  <data name="HelloWorld" xml:space="preserve">
    <value>void main()
{
    console.write("Hello World");
}</value>
  </data>
  <data name="LolCats" xml:space="preserve">
    <value>public class Lolcat
{
    constructor(string name)
    {
        Name = name;
        initSpeekers();
    }

    string property Name;

    method Say(Mood mood)
    { 
        Speek speek = speekers[mood](mood);
        console.write(Name + ": " + speek.Say);
        return speek.Mood;
    }

    typedef Func&lt;Mood, Speek&gt; 		  Speeker; 
    typedef Dictionary&lt;Mood, Speeker&gt; Speekers; 
        
    protected Speekers speekers = new Speekers();

    protected virtual void initSpeekers()
    {
        Speeker defaultSpeek = function(mood)
        {
            return Speeks.AnySpeek(mood);  
        };

        speekers[Mood.Nize]   = Speeks.AnySpeek;
        speekers[Mood.Skerd]  = defaultSpeek;
        speekers[Mood.Hungry] = defaultSpeek;
    }
}</value>
  </data>
  <data name="LolCatsApplication" xml:space="preserve">
    <value>var cats = [
    new Lolcat("Kitty"), 
    new Lolcat("Furry Kitty"), 
    new Trollcat("Ball of Fur")
];

var mood = Mood.Nize;

for(int i = 0; i &lt; 30; i++)
{
    int cat = random.Int(3);
    mood = cats[cat].Say(mood);
}

console.write("Powered by speaklolcat.com");</value>
  </data>
  <data name="LolCatsSpeek" xml:space="preserve">
    <value>public enum Mood
{
    Nize,
    Hungry,
    Skerd,
}

public class Speek
{
    public string Say  { get; set; }
    public Mood   Mood { get; set; }
}

public class Speeks
{
    static method AnySpeek(Mood mood)
    {
        Speek[] choices;
        switch (mood)
        {
            case Mood.Nize: choices = NizeTalk; break;
            case Mood.Skerd: choices = SkerdTalk; break;
            default: choices = HungryTalk; break;
        }
        
        return choices[random.Int(choices.Length)];
    }
        
    static Speek[] NizeTalk = [
        new Speek {Say = "HAI",               Mood = Mood.Nize},
        new Speek {Say = "KTHXBYE",           Mood = Mood.Skerd},
        new Speek {Say = "I HAS CHEEZBURGER", Mood = Mood.Hungry},
    ];

    static Speek[] HungryTalk = [
        new Speek {Say = "I WANTS CHEEZBURGER",      Mood = Mood.Hungry},
        new Speek {Say = "PLZ",                      Mood = Mood.Skerd},
        new Speek {Say = "I CAN HAS CHEEZBURGER...", Mood = Mood.Nize},
    ];

    static Speek[] SkerdTalk = [
        new Speek {Say = "IM GUD KITTEH",           Mood = Mood.Nize},
        new Speek {Say = "PLZ",                     Mood = Mood.Skerd},
        new Speek {Say = "I WANTS NO CHEEZBURGER",  Mood = Mood.Nize},
        new Speek {Say = "I HAS FAILD",             Mood = Mood.Hungry},
    ];
}</value>
  </data>
  <data name="LolCatsTrollcat" xml:space="preserve">
    <value>public class Trollcat : Lolcat
{
    public Trollcat(string name)
        : base(name)
    {
    }

    protected override void initSpeekers()
    {
        base.initSpeekers();

        speekers[Mood.Nize] = function(mood)
        {
            return new Speek { Say = "BAD KITTEH!", Mood = Mood.Skerd };
        };

        speekers[Mood.Hungry] = hungry;
    }

    function hungry(Mood m)
    {
        return new Speek { Say = "NO CHEEZBURGER!", Mood = Mood.Skerd };
    }
}</value>
  </data>
  <data name="MatchExtension" xml:space="preserve">
    <value>environment
    .keyword("match");

lexical
    .match()
        .token("match", named: "keyword")
        .enclosed('(', ')')
        .token('{')
        .then(lexical.transform()
            .replace("keyword", "switch")
            .then(ProcessMatch, referenceToken: "keyword"));</value>
  </data>
  <data name="MatchTransform" xml:space="preserve">
    <value>private static SyntaxNode ProcessMatch(SyntaxNode node, Scope scope)
{
    var switchExpr = node as SwitchStatementSyntax;
    if (switchExpr == null)
    {
        scope.AddError("match01", "malformed match", node);
        return node;
    }

    //store items to simplify
    var cases = new List&lt;ExpressionSyntax&gt;();
    var statements = new List&lt;StatementSyntax&gt;();
    var defaultStatement = null as StatementSyntax;

    foreach (var section in switchExpr.Sections)
    {
        bool isDefault;
        var expr = caseExpression(section.Labels, switchExpr.Expression, out isDefault);

        StatementSyntax statement = caseStatement(section.Statements);
        if (isDefault &amp;&amp; section.Labels.Count == 1)
        {
            defaultStatement = statement;
        }
        else
        {
            cases.Add(expr);
            statements.Add(statement);

            if (isDefault)
                defaultStatement = statement;
        }
    }

    //convert cases to ifs
    var last = cases.Count - 1;
    IfStatementSyntax result = CSharp.IfStatement(cases[last], statements[last]);

    if (defaultStatement != null)
        result = result.WithElse(CSharp.ElseClause(defaultStatement));


    for (int i = last - 1; i &gt;= 0; i--)
    {
        result = CSharp.IfStatement(cases[i], statements[i])
            .WithElse(CSharp.ElseClause(result));
    }

    return result;
}

private static StatementSyntax caseStatement(SyntaxList&lt;StatementSyntax&gt; statements)
{
    if (statements.Count == 1)
        return statements.First();

    return CSharp.Block(statements);
}

private static ExpressionSyntax caseExpression(SyntaxList&lt;SwitchLabelSyntax&gt; labels, ExpressionSyntax control, out bool isDefault)
{
    isDefault = false;
    List&lt;ExpressionSyntax&gt; cases = new List&lt;ExpressionSyntax&gt;();
    foreach (var label in labels)
    {
        bool thisDefault;
        var expr = caseExpression(label, control, out thisDefault);
        isDefault |= thisDefault;

        if (!thisDefault)
            cases.Add(expr);
    }

    switch (cases.Count)
    {
        case 0: return null;
        case 1: return cases[0];
        default: return CreateOrExpression(cases);
    }
}

private static ExpressionSyntax CreateOrExpression(List&lt;ExpressionSyntax&gt; cases)
{
    var result = CSharp.BinaryExpression(SyntaxKind.LogicalOrExpression, cases[0], cases[1]);
    for(int i = 2; i &lt; cases.Count; i++)
        result = CSharp.BinaryExpression(SyntaxKind.LogicalOrExpression, result, cases[i]);

    return result;
}

private static ExpressionSyntax caseExpression(SwitchLabelSyntax label, ExpressionSyntax control, out bool isDefault)
{
    isDefault = label.Keyword.Kind() == SyntaxKind.DefaultKeyword;

    var caseLabel = label as CaseSwitchLabelSyntax;
    if (caseLabel != null)
    {
        var result = caseLabel.Value;
        if (result is BinaryExpressionSyntax)
        {
            var expr = result as BinaryExpressionSyntax;
            if (expr.Left.IsMissing)
                return CSharp.BinaryExpression(expr.Kind(), control, expr.Right);

            return expr;
        }

        return CSharp.BinaryExpression(SyntaxKind.EqualsExpression, control, result);
    }

    return null;
}</value>
  </data>
  <data name="MatchUsage" xml:space="preserve">
    <value>void main()
{
    int y = 20;
    match (x)
    {
        case 0:
        {
            y = 20;
            return null;
        }
        case &gt; 10: 
        	return 30;
        case y &gt; 10: 
        	return 40;
        default: 
        	return x;
    }
}</value>
  </data>
  <data name="Misc" xml:space="preserve">
    <value>class Misc 
{
    typedef IEnumerable&lt;int&gt; 	 Data;
    typedef function&lt;int, int&gt;   Calculation;
    typedef Dictionary&lt;int, int&gt; Results;

    void main()
    {
        var data = [2, 3, 5, 7, 11];
        var calc = function(int value)
        {
            return value*5;
        };
        
        Results results = new Results();
        calculate(data, calc, results);
    }

    private void calculate(Data data, Calculation fn, Results results)
    {
        foreach(var d in data)
        {
            var result = fn(d);
            results[d] = result;
        }
    }
}</value>
  </data>
  <data name="Philosophers" xml:space="preserve">
    <value>concurrent class philosopher 
{
    [Forever]
    void main(string name, chopstick left, chopstick right) 
    {
        _name  = name;
        _left  = left;
        _right = right;
                               
        {think()}
    }
	
    void think()
    {
        console.write(_name + " is thinking");
        {wait(sec: rand(1.0, 2.0))
            -&gt; hungry()}
    }

    void hungry()
    {
        console.write(_name + " is hungry");

        {(_left.acquire(this) &amp; _right.acquire(this))
            -&gt; eat()}
    }
	
    void eat()
    {
        console.write(_name + " is eating");
	                    
        {wait(sec: rand(1.0, 2.0))
            -&gt; (_left.release(this) &amp; _right.release(this))}

        console.write(_name + " is full");
    }
	                
    private string _name;
    private chopstick _left;
    private chopstick _right;
}</value>
  </data>
  <data name="PhilosophersApp" xml:space="preserve">
    <value>var names = ["Kant", "Archimedes", "Nietzche", "Plato", "Engels"];

int phCount = 5;

var philosophers = spawn&lt;philosopher&gt;(phCount).ToArray();
var chopsticks   = spawn&lt;chopstick&gt;(phCount).ToArray();

foreach (var chopstick in chopsticks)
    start(chopstick);

for (var i = 0; i &lt; phCount; i++)
{
    var left = chopsticks[i];
    var right = i == phCount - 1 ? chopsticks[0] : chopsticks[i + 1];
    start(philosophers[i], names[i], left, right);
}</value>
  </data>
</root>