<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MatchLinker" xml:space="preserve">
    <value>public class Linker : ManagedLinker
    {
        public SyntaxNode Link(SyntaxNode node, SemanticModel model)
        {
            return node;
        }
    }</value>
  </data>
  <data name="MatchParser" xml:space="preserve">
    <value>public class Parser : ManagedParser&lt;Linker&gt;
    {
        public SyntaxNode ParseCode(SyntaxNode node, string id, ParameterListSyntax args, BlockSyntax code, bool expectsResult)
        {
            ExpressionSyntax control = null;
            if (args.Parameters.Count &gt; 0)
                control = SyntaxFactory.IdentifierName(args.Parameters[0].Identifier);

            //all the match element supports are case/default
            if (!startsWithCase(code))
            {
                Error(node, "match requires switch like cases");
                return null;
            }

            List&lt;ExpressionSyntax&gt; cases      = new List&lt;ExpressionSyntax&gt;();
            List&lt;StatementSyntax&gt;  statements = new List&lt;StatementSyntax&gt;();
            StatementSyntax        defaultStatement = null; 

            bool expectingCase          = true;
            bool expectDefaultOrEnd     = false;
            bool expectDefaultStatement = false;
            foreach (var child in node.ChildNodes())
            {
                if (expectDefaultOrEnd)
                {
                    if (child.ToString().Trim() != "default" || child.GetTrailingTrivia().ToString().Trim() != ":")
                    {
                        Error(child, "expecting match default");
                        return null;
                    }

                    expectDefaultStatement = true;
                    expectDefaultOrEnd     = false;
                    expectingCase          = false; 
                }
                else if (expectingCase)
                {
                    expectingCase = false;
                    ExpressionSyntax caseExpression = getCaseExpression(control, child);
                    if (caseExpression == null)
                        return null; //something went wrong

                    cases.Add(caseExpression);
                }
                else
                {
                    expectingCase = true;
                    StatementSyntax statement = getCaseStatement(child, out expectDefaultOrEnd);
                    if (statement == null)
                        return null; //something went wrong

                    if (expectDefaultStatement)
                        defaultStatement = statement;
                    else
                        statements.Add(statement);

                    expectDefaultStatement = false;
                }
            }
            
            return buildIfStatement(node, cases, statements, defaultStatement);
        }

        private bool startsWithCase(BlockSyntax code)
        {
            foreach (var trivia in code.OpenBraceToken.GetAllTrivia())
            {
                if (trivia.IsKind(SyntaxKind.SkippedTokensTrivia) &amp;&amp; trivia.ToString() == "case")
                    return true;
            }

            return false;
        }

        private ExpressionSyntax getCaseExpression(ExpressionSyntax control, SyntaxNode child)
        {
            ExpressionStatementSyntax statement = child as ExpressionStatementSyntax;
            ExpressionSyntax          result    = statement != null? statement.Expression : null;
            if (result == null)
            {
                Error(child, "match expected expression, got '" + child.ToString() + "'");
                return null;
            }

            var ttrivia = child.GetTrailingTrivia().ToString().Trim();
            if (ttrivia != ":")
            {
                Error(child, ": expected after a match epression");
                return null;
            }

            if (result is BinaryExpressionSyntax)
            {
                var expr = result as BinaryExpressionSyntax;
                if (expr.Left.IsMissing)
                {
                    if (control == null)
                    {
                        Error(child, "controlless match can only evaluate binary expressions");
                        return null;
                    }

                    return SyntaxFactory.BinaryExpression(expr.CSharpKind(), control, expr.Right);
                }

                return expr;
            }

            if (control == null)
            {
                Error(child, "controlless match can only evaluate binary expressions");
                return null;
            }

            return SyntaxFactory.BinaryExpression(SyntaxKind.EqualsExpression, control, result);
        }

        private StatementSyntax getCaseStatement(SyntaxNode child, out bool expectDefaultOrEnd)
        {
            expectDefaultOrEnd = false;

            StatementSyntax result = child as StatementSyntax;
            if (result == null)
            {
                Error(child, "expecting statement after case");
                return null;
            }

            var trivia = child.GetTrailingTrivia().ToString().Trim();
            expectDefaultOrEnd = trivia != "case";
            return result.WithoutTrailingTrivia();
        }

        private SyntaxNode buildIfStatement(SyntaxNode mainNode, List&lt;ExpressionSyntax&gt; cases, List&lt;StatementSyntax&gt; statements, StatementSyntax defaultStatement)
        {
            if (cases.Count == 0)
            {
                Error(mainNode, "match expects at least one case");
                return null;
            }

            var last = cases.Count - 1;
            IfStatementSyntax result = SyntaxFactory.IfStatement(cases[last], statements[last]);
            if (defaultStatement != null)
                result = result.WithElse(SyntaxFactory.ElseClause(defaultStatement));


            for (int i = last - 1; i &gt;= 0; i--)
            {
                result = SyntaxFactory.IfStatement(cases[i], statements[i])
                    .WithElse(SyntaxFactory.ElseClause(result));
            }

            return result;
        }
    }</value>
  </data>
  <data name="MatchTest1" xml:space="preserve">
    <value>void main()
{
    int y = 20;
    match (x)
    {
        case 0:
        {
            y = 20;
            return null;
        }
        case &gt; 10: 
        	return 30;
        case y &gt; 10: 
        	return 40;
        default: 
        	return x;
    }
}</value>
  </data>
  <data name="PureTest1" xml:space="preserve">
    <value>public class Impure 
{
    int _i = 0;
    public void modify(int ii)
    {
        _i += ii;
    }
}

public pure class Pure
{
    public void modify(Impure ip, int ii)
    {
        //this call modifies state
        ip.modify(ii);
    }
}</value>
  </data>
  <data name="PureTest2" xml:space="preserve">
    <value>public static class StaticPure 
{
    public int doSomething(int ii)
    {
    }
}

public pure class Pure
{
    public void modify(StaticPure sp, int ii)
    {
        //this call does not modify state
        sp.doSomething(ii);
    }
}</value>
  </data>
</root>